name: build

on: [ push, pull_request, workflow_dispatch ]

permissions:
  contents: write

jobs:
  build-windows-amd64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install tools
      run: |
        go install github.com/mitchellh/gox@latest

    - name: Build
      env:
        RELEASE: "${{ github.sha }}"
      run: C:\\msys64\\usr\\bin\\bash.exe -c "make build-os-windows"

    - name: Test
      run: make test

    - name: Pack artifacts
      if: success()
      run: |
        cd bin/
        7z a goTApaper-windows-amd64.zip *.* -r

    - uses: actions/upload-artifact@v4
      if: success()
      with:
        name: goTApaper-windows-amd64.zip
        path: bin/goTApaper-windows-amd64.zip


  build-linux:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
        - osarch: linux-amd64
          container: ""
        # - osarch: linux-i386
          # container: i386/ubuntu:18.04
    container: "${{ matrix.container }}"
    steps:
    - name: Install basic tools (for i386 only)
      run: |
        apt-get update -y
        apt-get install -y sudo curl
        curl -fsSL https://deb.nodesource.com/setup_12.x | bash -
        apt-get install -y nodejs
      if: startsWith(matrix.container, 'i386')

    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git build-essential libgtk-3-dev libayatana-appindicator3-dev

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install tools
      run: |
        go install github.com/mitchellh/gox@latest

    - name: Build
      env:
        RELEASE: "${{ github.sha }}"
      run: make build-os-${{ matrix.osarch }}

    - name: Test
      run: make test

    - name: Pack artifacts
      if: success()
      run: |
        cd bin/
        tar czf "goTApaper-${{ matrix.osarch }}.tgz" *.*

    - uses: actions/upload-artifact@v4
      if: success()
      with:
        name: goTApaper-${{ matrix.osarch }}.tgz
        path: bin/goTApaper-${{ matrix.osarch }}.tgz

  build-darwin:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install tools
      run: |
        go install github.com/mitchellh/gox@latest

    - name: Build amd64
      env:
        RELEASE: "${{ github.sha }}"
      run: make build-os-darwin-amd64

    - name: Build arm
      env:
        RELEASE: "${{ github.sha }}"
      run: make build-os-darwin-arm64

    - name: Test
      run: make test

    - name: Pack artifacts
      if: success()
      run: |
        cd bin/
        7z a goTApaper-darwin-amd64.zip goTApaper-*-darwin-amd64
        7z a goTApaper-darwin-arm64.zip goTApaper-*-darwin-arm64
        rm goTApaper-*-darwin-amd64 goTApaper-*-darwin-arm64

    - uses: actions/upload-artifact@v4
      if: success()
      with:
        name: goTApaper-darwin
        path: bin/*.*

  release:
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
    - build-windows-amd64
    - build-darwin
    - build-linux

    steps:
    - name: Set version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - uses: actions/download-artifact@v4
      id: download
      with:
        path: artifacts

    - name: Echo download path
      run: |
        echo ${{steps.download.outputs.download-path}}
        find ${{steps.download.outputs.download-path}}

    - name: Create release assets
      id: assets
      run: |
        mkdir -p release/
        find ${{steps.download.outputs.download-path}} -type f | xargs -I A_R_T cp A_R_T release/
        find release/ -type f -name 'goTApaper*' -exec bash -c 'f="$1"; d=$(dirname "$f"); b=$(basename "$f"); if [[ "$b" == *.* ]]; then n="${b%.*}"; e="${b##*.}"; mv "$f" "$d/${n}-${{ env.RELEASE_VERSION }}.${e}"; else mv "$f" "$d/${b}-${{ env.RELEASE_VERSION }}"; fi' _ {} \;
        find release/ -type f
        #echo "::set-output name=release-assets::$(find release/ -type f)"

    - uses: softprops/action-gh-release@v2
      with:
        draft: true
        make_latest: true
        generate_release_notes: true
        files: |
          release/config.yaml.example
          release/goTApaper-windows-*.*
          release/goTApaper-*.dmg
          release/goTApaper-linux-*.*
          release/goTApaper-darwin-*.*
        preserve_order: true
